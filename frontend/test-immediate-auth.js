// Script pour tester le chargement imm√©diat de l'authentification
console.log('üöÄ Test de chargement imm√©diat de l\'authentification...');

// Fonction pour v√©rifier l'√©tat actuel
function checkAuthState() {
  console.log('üîç V√©rification de l\'√©tat d\'authentification...');
  
  const token = localStorage.getItem('token');
  const user = localStorage.getItem('user');
  
  console.log('üìä √âtat localStorage:');
  console.log('- Token:', token ? `‚úÖ (${token.length} caract√®res)` : '‚ùå');
  console.log('- User:', user ? '‚úÖ' : '‚ùå');
  
  if (user) {
    try {
      const userData = JSON.parse(user);
      console.log('üë§ Donn√©es utilisateur:', userData);
    } catch (error) {
      console.error('‚ùå Erreur parsing user:', error);
    }
  }
  
  // V√©rifier si les donn√©es sont valides
  if (token && user) {
    console.log('‚úÖ Donn√©es d\'authentification valides trouv√©es');
    console.log('üîÑ Rechargement de la page pour tester le hook...');
    
    setTimeout(() => {
      window.location.reload();
    }, 2000);
  } else {
    console.log('‚ùå Donn√©es d\'authentification manquantes ou invalides');
  }
}

// Ex√©cuter imm√©diatement
checkAuthState();

// Exporter pour utilisation dans la console
window.checkAuthState = checkAuthState; 